import os
import asyncio
import json
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

POST_INTERVAL = 60 * 60 * 2  # 2 —á–∞—Å–∞

def parse_interval(interval_str):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1d 2h 30m –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)"""
    if interval_str.isdigit():
        return int(interval_str) * 3600  # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º —á–∞—Å–∞–º–∏
    
    total_seconds = 0
    days = re.search(r'(\d+)d', interval_str)
    hours = re.search(r'(\d+)h', interval_str)
    minutes = re.search(r'(\d+)m', interval_str)
    
    if days:
        total_seconds += int(days.group(1)) * 24 * 3600
    if hours:
        total_seconds += int(hours.group(1)) * 3600
    if minutes:
        total_seconds += int(minutes.group(1)) * 60
    
    return total_seconds if total_seconds > 0 else None

def format_interval(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    days = seconds // (24 * 3600)
    hours = (seconds % (24 * 3600)) // 3600
    minutes = (seconds % 3600) // 60
    
    parts = []
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0:
        parts.append(f"{minutes}–º")
    
    return " ".join(parts) if parts else "0–º"

SIGNATURE = '<a href="https://t.me/+oBc3uUiG9Y45ZDM6">Femboys</a>'

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

QUEUE_FILE = "queue.json"

def load_queue():
    if not os.path.exists(QUEUE_FILE):
        return []
    with open(QUEUE_FILE, "r") as f:
        return json.load(f)

def save_queue(queue):
    with open(QUEUE_FILE, "w") as f:
        json.dump(queue, f)

@dp.message(F.content_type == "text")
async def handle_commands(message: Message):
    global POST_INTERVAL, CHANNEL_ID  # –æ–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    text = message.text.lower()
    
    if text == "/help":
        queue = load_queue()
        queue_status = f"–í –æ—á–µ—Ä–µ–¥–∏: {len(queue)} —Ñ–æ—Ç–æ" if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
        channel_info = f"ID: {CHANNEL_ID}" if CHANNEL_ID else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        help_text = f"""
ü§ñ <b>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Ñ–æ—Ç–æ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {queue_status}
‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {format_interval(POST_INTERVAL)}
üì¢ <b>–ö–∞–Ω–∞–ª:</b> {channel_info}

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/post - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å

<b>‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º:</b>
/interval 2h - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
/interval 1d 6h - –∫–∞–∂–¥—ã–µ 1 –¥–µ–Ω—å 6 —á–∞—Å–æ–≤
/interval 30m - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
/interval 1 - –∫–∞–∂–¥—ã–π —á–∞—Å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)

/üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:
/channel - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
/setchannel -1001234567890 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞

<b>üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:</b>
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å
/queue - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏
/remove 1 - —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É

üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
        """
        await message.reply(help_text)
    
    elif text == "/status":
        queue = load_queue()
        queue_status = f"–í –æ—á–µ—Ä–µ–¥–∏: {len(queue)} —Ñ–æ—Ç–æ" if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
        channel_info = f"ID: {CHANNEL_ID}" if CHANNEL_ID else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>

üì∏ <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_status}
‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {format_interval(POST_INTERVAL)}
üì¢ <b>–ö–∞–Ω–∞–ª:</b> {channel_info}
ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if CHANNEL_ID else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ—Ç –∫–∞–Ω–∞–ª–∞)'}
        """
        await message.reply(status_text)
    
    elif text == "/post":
        queue = load_queue()
        if queue:
            file_id = queue.pop(0)
            try:
                await bot.send_photo(chat_id=CHANNEL_ID, photo=file_id, caption=SIGNATURE)
                save_queue(queue)
                await message.reply("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
            except Exception as e:
                queue.insert(0, file_id)
                save_queue(queue)
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        else:
            await message.reply("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
    
    elif text.startswith("/interval "):
        try:
            interval_part = text.split(maxsplit=1)[1]
            new_interval = parse_interval(interval_part)
            
            if new_interval is None or new_interval < 60:
                await message.reply("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã")
                return
                
            POST_INTERVAL = new_interval
            await message.reply(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {format_interval(POST_INTERVAL)}")
        except (IndexError, ValueError):
            await message.reply("""‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:
/interval 2h - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
/interval 1d 6h 30m - –∫–∞–∂–¥—ã–µ 1 –¥–µ–Ω—å 6 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç
/interval 30m - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç""")
    
    elif text == "/clear":
        save_queue([])
        await message.reply("‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!")
    
    elif text == "/channel":
        if CHANNEL_ID:
            await message.reply(f"üì¢ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {CHANNEL_ID}")
        else:
            await message.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel <ID>")
    
    elif text.startswith("/setchannel "):
        try:
            new_channel = text.split()[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞
            if not (new_channel.startswith('-') and new_channel[1:].isdigit()):
                await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '-' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return
            
            CHANNEL_ID = new_channel
            await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {CHANNEL_ID}")
            
        except IndexError:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏–º–µ—Ä: /setchannel -1001234567890")
    
    elif text == "/queue":
        queue = load_queue()
        if not queue:
            await message.reply("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        else:
            queue_text = f"üìã <b>–û—á–µ—Ä–µ–¥—å ({len(queue)} —Ñ–æ—Ç–æ):</b>\n\n"
            for i, file_id in enumerate(queue[:10], 1):
                queue_text += f"{i}. {file_id[:20]}...\n"
            
            if len(queue) > 10:
                queue_text += f"\n... –∏ –µ—â–µ {len(queue) - 10} —Ñ–æ—Ç–æ"
            
            queue_text += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove <–Ω–æ–º–µ—Ä> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            await message.reply(queue_text)
    
    elif text.startswith("/remove "):
        try:
            queue = load_queue()
            index = int(text.split()[1]) - 1
            
            if 0 <= index < len(queue):
                removed = queue.pop(index)
                save_queue(queue)
                await message.reply(f"‚úÖ –§–æ—Ç–æ #{index + 1} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n–û—Å—Ç–∞–ª–æ—Å—å: {len(queue)}")
            else:
                await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í –æ—á–µ—Ä–µ–¥–∏ {len(queue)} —Ñ–æ—Ç–æ")
                
        except (IndexError, ValueError):
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ. –ü—Ä–∏–º–µ—Ä: /remove 1")

@dp.message(F.photo)
async def handle_photo(message: Message):
    file_id = message.photo[-1].file_id
    queue = load_queue()
    queue.append(file_id)
    save_queue(queue)
    await message.reply(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å! (–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)})")

async def scheduled_posting():
    print(f"ü§ñ –ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {format_interval(POST_INTERVAL)}")
    print(f"üìã ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
    
    while True:
        queue = load_queue()
        if queue:
            file_id = queue.pop(0)
            try:
                await bot.send_photo(chat_id=CHANNEL_ID, photo=file_id, caption=SIGNATURE)
                save_queue(queue)
                print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}")
            except Exception as e:
                queue.insert(0, file_id)
                save_queue(queue)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞")
        else:
            print("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ...")
        
        await asyncio.sleep(POST_INTERVAL)

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:10]}...")
    print(f"üì¢ ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
    
    asyncio.create_task(scheduled_posting())
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
